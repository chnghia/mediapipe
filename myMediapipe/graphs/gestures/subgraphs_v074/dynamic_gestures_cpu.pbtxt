# MyMediaPipe gestures recognition subgraph.

type: "gesturesSubgraph"

input_stream: "LANDMARKS:hand_landmarks"
input_stream: "PRESENCE:hand_presence"
output_stream: "DETECTIONS:static_gesture_detections"


# Drops the incoming packet if HandLandmarkSubgraph was unable to identify hand
# presence.

node {
  calculator: "GateCalculator"
  input_stream: "hand_landmarks"
  input_stream: "ALLOW:hand_presence"
  output_stream: "gated_hand_landmarks"

  node_options: {
    [type.googleapis.com/mediapipe.GateCalculatorOptions] {
      empty_packets_as_allow: false
    }
  }
}

node {
  calculator: "LandmarksListToVectorLandmarksCalculator"
  input_stream: "NORM_LANDMARKS:gated_hand_landmarks"
  output_stream: "NORM_LANDMARKS:vector_landmarks"
  options {
  }
}


# Calculates Angles from Landmarks
node {
  calculator: "LandmarksToAnglesCalculator"
  input_stream: "NORM_LANDMARKS:vector_landmarks"
  output_stream: "ANGLES:angles"
}

node {
  calculator: "anglesToTfLiteConverterCalculator"
  input_stream: "ANGLES:angles"
  output_stream: "TENSORS:angle_tensor"
  options: {
    [mediapipe.anglesToTfLiteConverterCalculatorOptions.ext] {
      zero_center: true
    }
  }
}

# Runs a TensorFlow Lite model on CPU that takes an angle tensor and outputs a
# vector of tensors representing the inference estimation of a tensor
node {
  calculator: "TfLiteInferenceCalculator"
  input_stream: "TENSORS:angle_tensor"
  output_stream: "TENSORS:detection_tensors"
  node_options: {
    [type.googleapis.com/mediapipe.TfLiteInferenceCalculatorOptions] {
      model_path: "myMediapipe/models/gestures003.tflite"
    }
  }
}

node {
  calculator: "AnglesToDetectionCalculator"
  input_stream: "TENSORS:detection_tensors"
  output_stream: "detections"
    node_options: {
    [type.googleapis.com/mediapipe.AnglesToDetectionCalculatorOptions] {
      queue_size: 10
    }
  }
}

# Subgraph for dynamic gestures proccesing
# (see dynamic_gestures_cpu_sub.pbtxt).
node {
  calculator: "dynamicGesturesSubgraph_003"
  input_stream: "LANDMARKS:vector_landmarks"
  input_stream: "ANGLES:angles"
  input_stream: "DETECTIONS:detections"
}

node {
  calculator: "DetectionLabelIdToTextCalculator"
  input_stream: "detections"
  output_stream: "static_gesture_detections"
  node_options: {
    [type.googleapis.com/mediapipe.DetectionLabelIdToTextCalculatorOptions] {
      label_map_path: "myMediapipe/models/static_gestures_labels_003.txt"
    }
  }
}

